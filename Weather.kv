#:kivy 1.9.1
#:import kivy kivy


ScreenManager:
    #screen manager is the linker between the kv file and the py file
    id: screen_manager

    SearchScreen:
        #ids and names are used to reference the screens
        id: search_screen
        name: 'SearchScreen'
        manager: screen_manager
        #only one screen manager will be used

    ForecastScreen:
        id: forecast_screen
        name: 'ForecastScreen'
        manager: screen_manager

        #linking all of the variable names. In the KV langauge everything has to go
        #through the manager and the names are like ports to reference the path data takes
        label_location: search_screen.location
        address: forecast_screen.address
        cTime: forecast_screen.cTime
        cTemp: forecast_screen.cTemp
        cIcon: forecast_screen.cIcon
        cSummary: forecast_screen.cSummary
        cHumidity: forecast_screen.cHumidity
        cUVIndex: forecast_screen.cUVIndex
        cOzone: forecast_screen.cOzone
        cWindSpeed: forecast_screen.cWindSpeed
        cWindGust: forecast_screen.cWindGust
        cVisibility: forecast_screen.cVisibility

        dTime0: forecast_screen.dTime0
        dIcon0: forecast_screen.dIcon0
        dTempHi0: forecast_screen.dTempHi0
        dTempLo0: forecast_screen.dTempLo0
        dTime1: forecast_screen.dTime1
        dIcon1: forecast_screen.dIcon1
        dTempHi1: forecast_screen.dTempHi1
        dTempLo1: forecast_screen.dTempLo1
        dTime2: forecast_screen.dTime2
        dIcon2: forecast_screen.dIcon2
        dTempHi2: forecast_screen.dTempHi2
        dTempLo2: forecast_screen.dTempLo2
        dTime3: forecast_screen.dTime3
        dIcon3: forecast_screen.dIcon3
        dTempHi3: forecast_screen.dTempHi3
        dTempLo3: forecast_screen.dTempLo3
        dTime4: forecast_screen.dTime4
        dIcon4: forecast_screen.dIcon4
        dTempHi4: forecast_screen.dTempHi4
        dTempLo4: forecast_screen.dTempLo4
        dTime5: forecast_screen.dTime5
        dIcon5: forecast_screen.dIcon5
        dTempHi5: forecast_screen.dTempHi5
        dTempLo5: forecast_screen.dTempLo5
        dTime6: forecast_screen.dTime6
        dIcon6: forecast_screen.dIcon6
        dTempHi6: forecast_screen.dTempHi6
        dTempLo6: forecast_screen.dTempLo6


<SearchScreen>:
    display: entry

    Image:
        #The apps background
        source: "data/background2.jpg"
        size: root.size
        allow_stretch: True
        keep_ratio: False

    Image:
        #The airplain image on the search screen
        #All images use screen size to edit position and size
        source: "data/logo.png"
        pos: root.center_x-(root.width/2), root.center_y-(root.center_y/2)
        keep_ratio: True
        height: root.height-self.parent.height/3
        width: root.width/2

    FloatLayout:
    #Float layouts mean that the items need to be manualy told where to go
        TextInput:
            id: entry
            text: '' #text for the search
            pos: root.center_x-(root.width/4), root.center_y-(root.height/40)
            size_hint_x: None
            size_hint_y: None
            height: (root.height/20)
            width: (root.width/2)
            #No multiline means that user can hit enter to search
            multiline:False
            #does not allow keyboard to suggest what to type this was to help
            #remove a bug where text was being appended
            keyboard_suggestions:False
            on_touch_up:
                #when text field is clicked and released it opens creates a drop down for search suggesions
                root.drop_down.open(self)
            on_text:
                #used to update the screen everytime a new letter is typed
                root.predict_location(entry.text+' ')
            on_text_validate:
                #when the user hits enter it will search and remove the widget tree
                root.set_location(entry.text+' ')
                root.drop_down.clear_widgets()


<ForecastScreen>:
    on_enter:
        #when the screen changes it is set to trigger these two functions
        root.set_data()
        root.get_data(root.address)

    Image:
        #same background image but must be specified for every screen
        source: "data/background2.jpg"
        allow_stretch: True
        keep_ratio: False

    BoxLayout:#a box frame work for widgets to fit inside of
        orientation: 'vertical'#adds boxes virtically

        #action bar is just a menu at the top of the screen
        ActionBar:
            pos_hint: {'top':1}#at top of screen and full width
            ActionView:
                use_separator: True #a nice bar to seperate buttons
                ActionPrevious:
                    title: root.address
                    with_previous: False
                    #app logo
                    app_icon: 'data/icon.png'
                ActionOverflow:
                    #left to make future button additions easier
                ActionButton:
                    #wont let button fall off into a drop down
                    important:True
                    icon: 'data/search.png'
                    on_press:
                        #when pressed goes back to the search screen for more searches
                        root.manager.current="SearchScreen"
                        root.manager.transition.direction = 'right'
                ActionGroup:
                    ActionButton:
                        id: history_button
                        text: 'History'
                        width: root.width/2
                        on_release: root.drop_down.open(self)
                        on_touch_move:
                            #all of the json entries can be cleared with a swipe
                            root.wipe_data()
                            root.drop_down.clear_widgets()


        BoxLayout:
            orientation: 'vertical'
            #This is where data presentation starts
            Label:
                text: str(root.cTime)
                text_size: self.text_size
                halign: 'center'

            BoxLayout:
                orientation: 'horizontal'

                BoxLayout:
                    orientation: 'horizontal'

                    Image:
                        source: "data/%s.png" % str(root.cIcon)
                        allow_stretch: True
                        keep_ratio: True

                    Label:
                        text: "[b]%sºF[/b]" % str(root.cTemp)
                        markup: True
                        font_size:'30sp' #sp considers resolution
                        halign: 'center'
            Label:
                text: str(root.cSummary)
                text_size: self.text_size
                halign: 'center'



        GridLayout:
        # for current day stats
            cols: 2
            rows: 2

            Button:
                background_color: (0,0,0,.1)

                text: "Humidity:\n\n[size=20sp]%s%%[/size]" % str(root.cHumidity)
                markup:True
                text_size: self.size
                halign: 'right'
                valign: 'top'
                padding_x: 20
                padding_y: 10
                Image:
                    source: "data/humidity.png"
                    pos: self.parent.center_x-(self.width), self.parent.center_y-self.height/2
                    height: self.parent.height-self.parent.height/3
                    width: self.parent.width/2


            Button:
                background_color: (0,0,0,.1)

                text: "UV Index:\n\n[size=20sp]%s[/size]" % str(root.cUVIndex)
                markup:True
                text_size: self.size
                halign: 'right'
                valign: 'top'
                padding_x: 20
                padding_y: 10

                Image:
                    source: "data/uv-index.png"
                    pos: self.parent.center_x-(self.width), self.parent.center_y-self.height/2
                    height: self.parent.height-self.parent.height/3
                    width: self.parent.width/2

            Button:
                background_color: (0,0,0,.1)

                text: "Wind Speed:\n\n[size=20sp]%s mph[/size]" % str(root.cWindSpeed)
                markup:True
                text_size: self.size
                halign: 'right'
                valign: 'top'
                padding_x: 20
                padding_y: 10

                Image:
                    source: "data/wind.png"
                    pos: self.parent.center_x-(self.width), self.parent.center_y-self.height/2
                    height: self.parent.height-self.parent.height/3
                    width: self.parent.width/2

            Button:
                background_color: (0,0,0,.1)

                text: 'Visibility:\n\n[size=20sp]%s[/size]' % str(root.cVisibility)
                markup:True
                text_size: self.size
                halign: 'right'
                valign: 'top'
                padding_x: 20
                padding_y: 10

                Image:
                    source: "data/visibility.png"
                    pos: self.parent.center_x-(self.width), self.parent.center_y-self.height/2
                    height: self.parent.height-self.parent.height/3
                    width: self.parent.width/2

        BoxLayout:
            orientation: 'horizontal'
            #this is where the 7 day forecast buttons start

            Button:
                text:  '%s\n\n\n\n\n\n[b][size=20sp]%sºF[/size][/b]\n%sºF' %  (str(root.dTime0), str(root.dTempHi0), str(root.dTempLo0))
                markup:True
                text_size: self.size
                halign: 'center'
                valign: 'top'
                padding_y: 15

                background_color: (0,0,0,.1)
                on_press:
                    self.background_color= (0,0,0,.2)
                    root.switchDay(0)
                on_release:
                    self.background_color= (0,0,0,.1)

                Image:
                    source: "data/%s.png" % str(root.dIcon0)
                    pos: self.parent.center_x-(self.width/2), self.parent.center_y-(self.height/3)
                    height: self.parent.height-self.parent.height/3
                    width: self.parent.width/2

            Button:
                text:  '%s\n\n\n\n\n\n[b][size=20sp]%sºF[/size][/b]\n%sºF' %  (str(root.dTime1), str(root.dTempHi1), str(root.dTempLo1))
                markup:True
                text_size: self.size
                halign: 'center'
                valign: 'top'
                padding_y: 15

                background_color: (0,0,0,.1)
                on_press:
                    self.background_color= (0,0,0,.2)
                    root.switchDay(1)
                on_release:
                    self.background_color= (0,0,0,.1)
                Image:
                    source: "data/%s.png" % str(root.dIcon1)
                    pos: self.parent.center_x-(self.width/2), self.parent.center_y-(self.height/3)
                    height: self.parent.height-self.parent.height/3
                    width: self.parent.width/2

            Button:
                text:  '%s\n\n\n\n\n\n[b][size=20sp]%sºF[/size][/b]\n%sºF' %  (str(root.dTime2), str(root.dTempHi2), str(root.dTempLo2))
                markup:True
                text_size: self.size
                halign: 'center'
                valign: 'top'
                padding_y: 15

                background_color: (0,0,0,.1)
                on_press:
                    self.background_color= (0,0,0,.2)
                    root.switchDay(2)
                on_release:
                    self.background_color= (0,0,0,.1)
                Image:
                    source: "data/%s.png" % str(root.dIcon2)
                    pos: self.parent.center_x-(self.width/2), self.parent.center_y-(self.height/3)
                    height: self.parent.height-self.parent.height/3
                    width: self.parent.width/2

            Button:
                text:  '%s\n\n\n\n\n\n[b][size=20sp]%sºF[/size][/b]\n%sºF' %  (str(root.dTime3), str(root.dTempHi3), str(root.dTempLo3))
                markup:True
                text_size: self.size
                halign: 'center'
                valign: 'top'
                padding_y: 15

                background_color: (0,0,0,.1)
                on_press:
                    self.background_color= (0,0,0,.2)
                    root.switchDay(3)
                on_release:
                    self.background_color= (0,0,0,.1)
                Image:
                    source: "data/%s.png" % str(root.dIcon3)
                    pos: self.parent.center_x-(self.width/2), self.parent.center_y-(self.height/3)
                    height: self.parent.height-self.parent.height/3
                    width: self.parent.width/2

            Button:
                text:  '%s\n\n\n\n\n\n[b][size=20sp]%sºF[/size][/b]\n%sºF' %  (str(root.dTime4), str(root.dTempHi4), str(root.dTempLo4))
                markup:True
                text_size: self.size
                halign: 'center'
                valign: 'top'
                padding_y: 15

                background_color: (0,0,0,.1)
                on_press:
                    self.background_color= (0,0,0,.2)
                    root.switchDay(4)
                on_release:
                    self.background_color= (0,0,0,.1)
                Image:
                    source: "data/%s.png" % str(root.dIcon4)
                    pos: self.parent.center_x-(self.width/2), self.parent.center_y-(self.height/3)
                    height: self.parent.height-self.parent.height/3
                    width: self.parent.width/2

            Button:
                text:  '%s\n\n\n\n\n\n[b][size=20sp]%sºF[/size][/b]\n%sºF' %  (str(root.dTime5), str(root.dTempHi5), str(root.dTempLo5))
                markup:True
                text_size: self.size
                outline_color:(1,0,1)
                outline_width:5
                halign: 'center'
                valign: 'top'
                padding_y: 15

                background_color: (0,0,0,.1)
                on_press:
                    self.background_color= (0,0,0,.2)
                    root.switchDay(5)
                on_release:
                    self.background_color= (0,0,0,.1)
                Image:
                    source: "data/%s.png" % str(root.dIcon5)
                    pos: self.parent.center_x-(self.width/2), self.parent.center_y-(self.height/3)
                    height: self.parent.height-self.parent.height/3
                    width: self.parent.width/2

            Button:
                text: '%s\n\n\n\n\n\n[b][size=20sp]%sºF[/size][/b]\n%sºF' %  (str(root.dTime6), str(root.dTempHi6), str(root.dTempLo6))
                markup:True
                text_size: self.size
                halign: 'center'
                valign: 'top'
                padding_y: 15

                background_color: (0,0,0,.1)
                on_press:
                    self.background_color= (0,0,0,.2)
                    root.switchDay(6)
                on_release:
                    self.background_color= (0,0,0,.1)
                Image:
                    source: "data/%s.png" % str(root.dIcon6)
                    pos: self.parent.center_x-(self.width/2), self.parent.center_y-(self.height/3)
                    height: self.parent.height-self.parent.height/3
                    width: self.parent.width/2
<Drop_Down>:
#drop down is an abstract class 


